#!/usr/bin/env python 
# -*- coding:utf-8 -*-
# Created by Vanish at 2019/2/24


# emm 超时。。
# 二进制中1的个数 使用位运算
class Solution:
    def NumberOf1(self, n):
        # write code here
        count = 0
        while n:
            n = n&(n-1) #把一个整数减去1之后与原来的整数做二进制与运算，相当于把这个整数最右边的1变为0
            count += 1
        return count

# 正数的原码，补码，反码 相同
# 负数的原码，符号位改为1
#       反码，符号位不变，其余取反
#       补码，反码+1
#   eg：5   表示为 0000 0101
#       -5  表示为（ 原码）：1000 0101 ===>  反码 ：1111 1010  ===>  补码：1111 1011

# 1、一个负数的补码数值加其原码的数值等于该数码对应的无符号数的模。
#   eg： 如-3,对应3位二进码
        # 原码就是：1011,
        # 反码就是：1100,
        # 补码就是：1101
        # 原码+补码=1011+1101=11000.
        # 1000就是3位二进码的模.
# 2、对补码再求补码，成原码。
# 3、正零与负零的补码相同。
#
# 正数的原码+对应负数的补码=0
# 0000 0101（5）+1111 1011（-5）=0

